@startuml

interface TransportClient{
  +void goIn(TransportClientKeeper keeper)
  +void goOut(TransportClientKeeper keeper)
  +void updateLocation(Location location)
  +void update()
}

class Location{
  -int position;
  -int level;
}

class Person{
  -Location location
  -PersonState state
  -Floor currentFloor
  -TransportClientKeeper keeper
  +void changeState(PersonState state)
  +void moveLeft()
  +void moveRight()
  +Floor getCurrentFloor()
  +Slot getCurrentSlot()
}

TransportClient <|-- Person
Person --> TransportClientKeeper
Person --> PersonState
Person --> Floor
Person --> FloorGetter

interface Passenger{
  +void updateState()
  +Location getLocation()
  +Slot getCurrentSlot()
}

interface FloorGetter{
  Floor getCurrentFloor(Person person)
}

Passenger <|-- Person

interface PersonState{
  +void action()
}

abstract class AbstractPersonState{
  #Person person
  AbstractPersonState(Passenger passenger)
  +void action()
}

AbstractPersonState -> Person
PersonState <|- AbstractPersonState
AbstractPersonState <|- GoToElevatorPersonState
AbstractPersonState <|-- WaitInsideElevatorPersonState
AbstractPersonState <|-- WaitForElevatorPersonState
AbstractPersonState <|-- WaitToTargetPositionPersonState

interface Observer{
  +void update()
}

Observer <|--- WaitInsideElevatorPersonState
Observer <|-- WaitForElevatorPersonState
WaitForElevatorPersonState-->ElevatorDoor
WaitInsideElevatorPersonState-->ElevatorDoor
DefaultElevatorDoor-->Observer

class GoToElevatorPersonState{
  -List<Boolean> slotsVisitList
  -int targetPosition
  -void setTargetPosition()
  -void getNearestNotVisitedPosition()
}

class WaitForElevatorPersonState{
  -ElevatorDoor elevatorDoor
  +void update()
}

class WaitInsideElevatorPersonState{
  -ElevatorDoor elevatorDoor
  +void update()
}

interface Slot{
  +int getPosition()
  +SlotType getType()
}

class ElevatorController{
  -int currentLevel
  -int targetLevel
  -ElevatorConfig config
  -ElevatorMechanism elevatorMechanism
  -RequestManager requestManager
  -List<ElevatorDoorMechanism> doors
  +void updateState()
  +Location getLocation()
  +void openDoors(int level)
  +void closeDoors(int level)
}

ElevatorController ---> ElevatorConfig
ElevatorController -> ElevatorDoorMechanism
ElevatorController --> ElevatorMechanism
ElevatorController -> ElevatorTargetCalculationStrategy
ElevatorController -> RequestManager

interface IndoorTransport{
  +void updateState()
  +Location getLocation()
}

interface RequestAddingManager{
  +void addRequest(ElevatorRequest request)
}

interface RequestManager{
  +void removeRequest(ElevatorRequest request)
  +List<ElevatorRequest> getRequests()
}

RequestAddingManager <|-- RequestManager

class StandardRequestManager{
  -List<ElevatorRequest> requests
  +void addRequest(ElevatorRequest request)
  +void removeRequest(ElevatorRequest request)
  +List<ElevatorRequest> getRequests()
}

RequestManager <|-- StandardRequestManager

StandardRequestManager -> ElevatorRequest

class ElevatorConfig{
  -int position
  -int minLevel
  -int maxLevel
}

class ElevatorRequest{
  -int targetLevel
}


interface Observable{
  +void addObserver(Observer observer)
  +void removeObserver(Observer observer)
  +void notifyObservers()
}

interface ElevatorDoorMechanism{
  +void openDoor()
  +void closeDoor()
}

interface ElevatorDoor{
  +void pushButton()
  +ElevatorConfig getConfig()
  +Elevator getElevator()
}

Observable <|--- ElevatorDoor

class DefaultElevatorDoor{
  -ElevatorConfig elevatorConfig
  -List<Observer> observers
  -Button button
  +Location getLocation()
  +void pushButton()
  +void openDoor()
  +void closeDoor()
  +void addObserver(Observer observer)
  +void removeObserver(Observer observer)
  +void notifyObservers()
}

ElevatorDoor <|-- DefaultElevatorDoor
ElevatorDoorMechanism <|-- DefaultElevatorDoor

Slot <|-- DefaultElevatorDoor
DefaultElevatorDoor -> Button

interface ElevatorTargetCalculationStrategy{
  int calculateTargetLevel(List<ElevatorRequest> requests)
}

interface TransportClientKeeper{
  +void addClient(TransportClient client)
  +void removeClient(TransportClient client)
}


interface ElevatorMechanism{
  +void moveUp()
  +void moveDown()
  +void onDoorOpened()
}

class DefaultElevator{
  -List<TransportClient> clients
  +void moveUp()
  +void moveDown()
  +void addClient(TransportClient client)
  +void removeClient(TransportClient client)
  +void notifyClients()
  +List<TransportClient> getClients()
}


interface Elevator{
  +void pushButton(int level)
}

ElevatorMechanism <|-- DefaultElevator
TransportClientKeeper <|-- Elevator
Elevator <|- DefaultElevator

DefaultElevator-->TransportClient

DefaultElevator --> Button

interface Button{
  +void addRequest(int level)
}

Button <|-- DefaultButton

class DefaultButton{
  -RequestAddingManager addingManager
  +void addRequest(int level)
}

DefaultButton --> RequestAddingManager

interface Floor{
  +int getLevel()
  +Slot getSlot(int position)
}

Floor <|-- DefaultFloor

class DefaultFloor{
  -int level
  -List<Slot> slots
  Floor(int level, List<Slot> slots)
  +int getLevel()
  +Slot getSlot(int position)
}

DefaultFloor --> Slot

class EmptySlot{
  -int position
  +int getPosition()
}

Slot <|-- EmptySlot

interface GameObject{
  +void updateState()
}

interface Building{
  +Iterator<Floor> getFloors()
  +Iterator<IndoorTransport> getTransports()
  +Iterator<Passenger> getPassengers()
}

class DefaultBuilding{
  -List<Floor> floors
  -List<IndoorTransport> transports
  -List<Passenger> passengers
  Building(List<Floor> floors, List<ElevatorController> elevators,
List<Passenger> passengers)
  +void updateState()
  +Iterator<Floor> getFloors()
  +Iterator<IndoorTransport> getTransports()
  +Iterator<Passenger> getPassengers()
}

GameObject <|-- Building
Building <|-- DefaultBuilding
DefaultBuilding --> Floor
DefaultBuilding --> IndoorTransport
DefaultBuilding --> Passenger

IndoorTransport <|-- ElevatorController

Main --> ConsoleUserInput

class ConsoleUserInput{
  -Console console
  -BuildingConfigurator configurator
  +void readCommand()
  -void parseCommand()
}

ConsoleUserInput --> BuildingConfigurator
ConsoleUserInput --> BuildingSimulationRunner
BuildingSimulationRunner-->Building
BuildingSimulationRunner-->BuildingPrintStrategy

interface BuildingConfigurator{
  +Building createBuilding()
  +void addIndoorTransport(IndoorTransport transport)
  +void addPassenger(Passenger passenger)
  +void setFloorCount(int count)
}

BuildingConfigurator <|-- DefaultBuildingConfigurator

class DefaultBuildingConfigurator{
  -int floorCount
  -List<IndoorTransport> transports
  -List<Passenger> passengers
  +void addIndoorTransport(IndoorTransport transport)
  +void addPassenger(Passenger passenger)
  +void setFloorCount(int count)
  +Building createBuilding()
}

class BuildingSimulationRunner{
  -Building building
  -BuildingPrintStrategy printStrategy
  BuildingSimulationRunner(Building building,
   BuildingPrintStrategy printStrategy)
  +void startSimulation()
  -void calculateState()
}

class BuildingSimulationRunner
note left: void startSimulation(){\r\n,,,\r\n  while(canSimulate){\r\n    calculateState();\r\n    printStrategy.printBuilding(building)\r\n}}

interface BuildingPrintStrategy{
  +void printBuilding(Building building)
}
@enduml