@startuml

@startuml
interface GameObject{
  +void updateState()
}

class Building{
  -List<Floor> floors
  -List<ElevatorController> elevators
  -List<Passenger> passengers
  Building(List<Floor> floors, List<ElevatorController> elevators,
List<Passenger> passengers)
  +void updateState()
}

Building -> Floor
Building -> ElevatorController
Building -> Passenger
GameObject <|- Building

Main --> ConsoleUserInput

class ConsoleUserInput{
  -Console console
  -BuildingConfigurator configurator
  +void readCommand()
}

ConsoleUserInput -> BuildingConfigurator
ConsoleUserInput -> BuildingSimulationRunner
BuildingSimulationRunner->Building
BuildingSimulationRunner->BuildingPrintStrategy

class BuildingConfigurator{
  -int floorCount
  -List<ElevatorController> elevators
  -List<Passenger> passengers
  +void addElevator()
  +void addPassenger()
  +void setFloorCount()
  +Building createBuilding()
}

class BuildingSimulationRunner{
  -Building building
  -BuildingPrintStrategy printStrategy
  BuildingSimulationRunner(Building building,
   BuildingPrintStrategy printStrategy)
  +void startSimulation()
  -void calculateState()
}

class BuildingSimulationRunner
note left: void startSimulation(){\r\n,,,\r\n  while(canSimulate){\r\n    calculateState();\r\nprintStrategy.printBuilding(building)\r\n}}

interface BuildingPrintStrategy{
  +void printBuilding(Building building)
}
@enduml
@enduml